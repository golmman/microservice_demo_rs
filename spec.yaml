openapi: 3.0.1
info:
  title: Customer Service
  description: This is a customer service demonstration in Scala, Go or Rust
  version: 0.2.0
servers:
  - url: http://localhost:3030
    description: local rust (warp) server
paths:
  /customer/{email}:
    get:
      description: Read a customer
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
          example: example@test.com
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: NOT FOUND
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Delete a customer
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
          example: example@test.com
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: NOT FOUND
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Create or update a customer
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
          example: example@test.com
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              allOf:
                - $ref: '#/components/schemas/Customer'
              required: ['email']
      responses:
        '200':
          description: A customer has been updated
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
        '201':
          description: A customer has been created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: BAD REQUEST
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Customer:
      type: object
      properties:
        email:
          type: string
          example: example@test.com
        firstName:
          type: string
          example: Stefan
        lastName:
          type: string
          example: Banach
        dateOfBirth:
          type: string
          format: date
          description: ISO-8601 Date
          example: 1892-03-30
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        streetName:
          type: string
          example: Fledermausweg
        city:
          type: string
          example: Las Vegas
        postalCode:
          type: string
          example: 1337
    Error:
      type: object
      properties:
        message:
          type: string
          example: 'That rug really tied the room together.'
        code:
          type: string
          enum:
            - CustomerCreationFailed,
            - CustomerDeletionFailed,
            - CustomerNotFound,
            - CustomerUpdateFailed,
            - DeserializationFailed,
            - InconsistentEmail,
            - InternalServerError,
            - MethodNotAllowed,
            - ResourceNotFound,
